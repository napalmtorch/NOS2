#include <Kernel/Core/Kernel.h>
using namespace HAL;
using namespace System;
using namespace Graphics;
using namespace Runtime;
namespace Core
{
    HAL::Memory::PhysicalMemoryManager PhysicalMM;
    HAL::Drivers::VGAController VGA;
}

const uint8_t test_prog[] = 
{
    0x7F, 0x45, 0x4C, 0x46, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x02, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x54, 0x80, 0x04, 0x08, 0x34, 0x00, 0x00, 0x00, 
    0x98, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x20, 0x00, 0x01, 0x00, 0x28, 0x00, 
    0x07, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x04, 0x08, 
    0x00, 0x80, 0x04, 0x08, 0x98, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 
    0x00, 0x10, 0x00, 0x00, 0x55, 0x89, 0xE5, 0xB8, 0xA4, 0x01, 0x00, 0x00, 0x5D, 0xC3, 0x00, 0x00, 
    0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7A, 0x52, 0x00, 0x01, 0x7C, 0x08, 0x01, 
    0x1B, 0x0C, 0x04, 0x04, 0x88, 0x01, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 
    0xD4, 0xFF, 0xFF, 0xFF, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0E, 0x08, 0x85, 0x02, 0x42, 0x0D, 
    0x05, 0x46, 0xC5, 0x0C, 0x04, 0x04, 0x00, 0x00, 0x47, 0x43, 0x43, 0x3A, 0x20, 0x28, 0x47, 0x4E, 
    0x55, 0x29, 0x20, 0x37, 0x2E, 0x31, 0x2E, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x54, 0x80, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x60, 0x80, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xF1, 0xFF, 0x08, 0x00, 0x00, 0x00, 
    0x98, 0x90, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x02, 0x00, 0x14, 0x00, 0x00, 0x00, 
    0x54, 0x80, 0x04, 0x08, 0x0A, 0x00, 0x00, 0x00, 0x12, 0x00, 0x01, 0x00, 0x19, 0x00, 0x00, 0x00, 
    0x98, 0x90, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x02, 0x00, 0x20, 0x00, 0x00, 0x00, 
    0x98, 0x90, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x74, 0x65, 0x73, 
    0x74, 0x2E, 0x63, 0x00, 0x5F, 0x5F, 0x62, 0x73, 0x73, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 
    0x6D, 0x61, 0x69, 0x6E, 0x00, 0x5F, 0x65, 0x64, 0x61, 0x74, 0x61, 0x00, 0x5F, 0x65, 0x6E, 0x64, 
    0x00, 0x00, 0x2E, 0x73, 0x79, 0x6D, 0x74, 0x61, 0x62, 0x00, 0x2E, 0x73, 0x74, 0x72, 0x74, 0x61, 
    0x62, 0x00, 0x2E, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00, 0x2E, 0x74, 0x65, 0x78, 
    0x74, 0x00, 0x2E, 0x65, 0x68, 0x5F, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x00, 0x2E, 0x63, 0x6F, 0x6D, 
    0x6D, 0x65, 0x6E, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x1B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x54, 0x80, 0x04, 0x08, 
    0x54, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
    0x02, 0x00, 0x00, 0x00, 0x60, 0x80, 0x04, 0x08, 0x60, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x2B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x98, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAC, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 
    0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
    0x09, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x3C, 0x01, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x01, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

namespace Kernel
{
    int TestMain(void* arg)
    {
        return 69;
    }

    void Boot()
    {
        // initialize serial and debugging
        Serial::SetPort(SerialPort::COM1);
        Debug::SetMode(DebugMode::Serial);

        // initialize vga controller
        Core::VGA.Init();
        Core::VGA.PutString(0, 0, "NapalmOS", Color4::Cyan, Color4::Black);
        Core::VGA.SetCursor(0, 1);

        // initialize descriptor tables
        GDT::Init();
        IDT::Init();

        // enable interrupts
        HAL::IDT::EnableInterrupts();

        // initialize physical memory
        Memory::Paging::Init();

        Core::PhysicalMM.Init(0x00C00000, 4096, 64);
        
        // create kernel thread
        Thread* kthread = Thread::CreateKernel();
        ThreadManager::Init(kthread);
        
        // run test program
        Thread* thread = Thread::CreateELF("test", 0x10000, (uint8_t*)test_prog, sizeof(test_prog));
        //Thread* thread = Thread::Create("test", 0x10000, TestMain);
        ThreadManager::Load(thread);

        HAL::PIT::Init(2000);
    }
    
    void BeforeRun()
    {
        Debug::OK("Finished booting");
        ThreadManager::Ready();
    }

    int time, last_time;

    void Run()
    {
        time = HAL::PIT::GetSecondsTotal();
        if (time != last_time)
        {
            Debug::Info("KERNEL LOOP");
            last_time = time;
        }
    }

    void PITCallback(Registers32* regs)
    {
        HAL::PIT::Calculate();
        ThreadManager::Switch();
    }
}